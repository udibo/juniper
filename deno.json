{
  "name": "@udibo/juniper",
  "version": "0.0.1",
  "description": "Juniper is a web framework for building React applications with Deno.",
  "license": "MIT",
  "exports": {
    ".": "./mod.ts",
    "./build": "./build.ts",
    "./server": "./server.ts",
    "./utils/env": "./utils/env.ts",
    "./utils/otel": "./utils/otel.ts",
    "./utils/testing": "./utils/testing.ts"
  },
  "tasks": {
    "serve": {
      "description": "Runs the server.",
      "command": "export OTEL_DENO=true OTEL_SERVICE_NAME=Example && deno run -A --env-file --env-file=.env.production --unstable-otel ./example/main.ts",
      "dependencies": ["start-dev"]
    },
    "test": {
      "description": "Runs the tests.",
      "command": "export OTEL_DENO=true OTEL_SERVICE_NAME=test && deno test -A --env-file --env-file=.env.test --trace-leaks --unstable-otel",
      "dependencies": ["start-test"]
    },
    "test-watch": {
      "description": "Runs the tests in watch mode.",
      "command": "deno task test --watch",
      "dependencies": ["start-test"]
    },
    "test-update": {
      "description": "Runs the tests and updates the snapshots.",
      "command": "deno task test -- --update",
      "dependencies": ["start-test"]
    },
    "check": {
      "description": "Checks the formatting and runs the linter.",
      "command": "deno lint && deno fmt --check"
    },
    "git-rebase": {
      "description": "Gets your branch up to date with master after a squash merge.",
      "command": "git fetch origin main && git rebase --onto origin/main HEAD"
    },
    "start-dev": {
      "description": "Starts the development services.",
      "command": "docker compose ps --services | grep -q '^postgres-dev$' || (docker compose up -d --wait postgres-dev && deno task drizzle-kit migrate && deno task drizzle-kit push && deno run -A --env-file ./example/database/seeds/default.ts)"
    },
    "start-test": {
      "description": "Starts the test services.",
      "command": "docker compose ps --services | grep -q '^postgres-test$' || (docker compose up -d --wait postgres-test && deno task drizzle-kit-test migrate && deno task drizzle-kit-test push && deno run -A --env-file --env-file=.env.test ./example/database/seeds/default.ts)"
    },
    "start-lgtm": {
      "description": "Starts the LGTM service.",
      "command": "docker compose up -d --wait lgtm"
    },
    "start": {
      "description": "Starts the development, test, and LGTM services.",
      "command": "deno task start-dev && deno task start-test && deno task start-lgtm"
    },
    "stop-dev": {
      "description": "Stops the development services.",
      "command": "docker compose down postgres-dev"
    },
    "stop-test": {
      "description": "Stops the test services.",
      "command": "docker compose down postgres-test"
    },
    "stop-lgtm": {
      "description": "Stops the LGTM service.",
      "command": "docker compose down lgtm"
    },
    "stop": {
      "description": "Stops the development, test, and LGTM services.",
      "command": "deno task stop-dev ; deno task stop-test ; deno task stop-lgtm"
    },
    "drizzle-kit": {
      "description": "Runs the drizzle-kit commands for the database.",
      "command": "deno -A --env-file npm:drizzle-kit"
    },
    "drizzle-kit-test": {
      "description": "Runs the drizzle-kit commands for the test database.",
      "command": "deno -A --env-file --env-file=.env.test npm:drizzle-kit"
    },
    "drizzle-kit:push": {
      "description": "Pushes your drizzle schema to the development and test databases.",
      "command": "deno task drizzle-kit:push ; deno task drizzle-kit-test push"
    }
  },
  "imports": {
    "/": "./example/",
    "./": "./",
    "@modelcontextprotocol/sdk": "npm:@modelcontextprotocol/sdk@^1.11.3",
    "@neondatabase/serverless": "npm:@neondatabase/serverless@^1.0.0",
    "@udibo/http-error": "jsr:@udibo/http-error@0.10",
    "@std/testing": "jsr:@std/testing@1",
    "@std/assert": "jsr:@std/assert@1",
    "@std/async": "jsr:@std/async@1",
    "@std/encoding": "jsr:@std/encoding@1",
    "@std/fs": "jsr:@std/fs@1",
    "@std/path": "jsr:@std/path@1",
    "@std/streams": "jsr:@std/streams@1",
    "@std/collections": "jsr:@std/collections@1",
    "@std/uuid": "jsr:@std/uuid@1",
    "@types/pg": "npm:@types/pg@^8.11.14",
    "cross-spawn": "npm:cross-spawn@^7.0.6",
    "drizzle-kit": "npm:drizzle-kit@^0.31.1",
    "drizzle-orm": "npm:drizzle-orm@^0.43.1",
    "drizzle-zod": "npm:drizzle-zod@^0.7.1",
    "@opentelemetry/api": "npm:@opentelemetry/api@1",
    "pg": "npm:pg@^8.15.6",
    "zod": "npm:zod@^3.24.3",
    "hono": "npm:hono@^4",
    "react": "npm:react@^18",
    "@types/react": "npm:@types/react@^18",
    "react-dom": "npm:react-dom@^18",
    "react-error-boundary": "npm:react-error-boundary@^4",
    "react-router": "npm:react-router@^7",
    "react-helmet-async": "npm:react-helmet-async@^2",
    "serialize-javascript": "npm:serialize-javascript@^6",
    "@testing-library/react": "npm:@testing-library/react@^16",
    "global-jsdom": "npm:global-jsdom@^25"
  },
  "nodeModulesDir": "auto",
  "unstable": ["kv"],
  "compilerOptions": {
    "lib": [
      "esnext",
      "dom",
      "dom.iterable",
      "dom.asynciterable",
      "deno.ns",
      "deno.unstable"
    ],
    "jsx": "react-jsx",
    "jsxImportSource": "react",
    "jsxImportSourceTypes": "@types/react"
  }
}
