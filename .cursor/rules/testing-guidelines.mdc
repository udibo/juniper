---
description: 
globs: 
alwaysApply: true
---
\
---
description: "Guidelines for writing and running tests in the Juniper project using Deno, @std/testing, and the mcp_juniper_test tool."
alwaysApply: true
# globs: ["**/*.test.ts"] # Optional: to auto-attach for test files.
---
# Testing Guidelines

## Test Execution
- Use the `mcp_juniper_test` tool to run tests.
  - To run all tests: (Assuming `mcp_juniper_test` without arguments runs all tests)
  - To run a specific test file: `mcp_juniper_test path/to/test.ts` (Provide the specific file path)
  - To run tests for examples in docstrings or markdown files: `mcp_juniper_test --doc path/to/file.ts` (Adjust if the flag is different for `mcp_juniper_test`)
- **ALWAYS** run tests using `mcp_juniper_test` after writing or modifying test files (`*.test.ts`) or the source code files they cover.
  - If you modified a specific file and its corresponding test, run `mcp_juniper_test path/to/your.test.ts`.
  - If changes are broader or you are unsure, consider running all tests.
- After running tests with the appropriate coverage flag (e.g., `mcp_juniper_test --coverage`), use `deno coverage --detailed` to view the coverage report. Ensure new code has test coverage.
- The MCP server also provides a `coverage` tool that can be called to get a detailed coverage report directly (equivalent to `deno coverage --detailed`).

## Coverage Notes
- Coverage files (.cov) are generated when tests are run (e.g. via `deno task test` or the `test` MCP tool which includes `--coverage`).
- The output of the `coverage` MCP tool (and `deno coverage --detailed`) will be based on the last set of tests for which coverage data was generated and stored (typically in the `./cov` directory).
- If you see the error "No covered files included in the report" when running the `coverage` tool or `deno coverage --detailed`, it means that no .cov files were found or they are empty. This usually indicates that the tests (which generate these coverage files) need to be run or re-run. Ensure tests have completed successfully and have generated coverage data before checking the coverage report.

## Test Structure and Practices
- Tests should be based on other existing tests.
- Place test files adjacent to source files with a `.test.ts` extension (e.g., `example/main.test.ts` for `example/main.ts`).
- Use BDD-style testing with `@std/testing/bdd`.
- Structure tests using `describe()` for test groups and `it()` for individual test cases.
- Co-locate related lifecycle hooks (`beforeAll()`, `afterAll()`, `beforeEach()`, `afterEach()`) for better readability. These are for setup and teardown of resources.
- Never use `node:test`. Lifecycle hooks should be imported from `@std/testing/bdd`.
- Use assertions from `@std/assert`.
- Prefer snapshots created with `isSnapshotMode()` over `assertSnapshot()`. When using snapshot mode, the test should write to a file as shown in the relevant documentation for the function.

### Example Test Structure:
```typescript
import { afterAll, afterEach, beforeAll, beforeEach, describe, it } from "@std/testing/bdd";
import { assertEquals } from "@std/assert";

describe("UserService", () => {
  // Group-level setup and teardown
  beforeAll(() => {
    // Setup that runs once before all tests in this group
    // e.g., database connection, test data initialization
  });
  afterAll(() => {
    // Cleanup that runs once after all tests in this group complete
    // e.g., close database connection, remove test data
  });

  // Per-test setup and teardown
  beforeEach(() => {
    // Setup that runs before each test case
    // e.g., reset service state, mock setup
  });
  afterEach(() => {
    // Cleanup that runs after each test case completes
    // e.g., clear mocks, reset state
  });

  it("should create new user", () => {
    // Test implementation
    assertEquals(actual, expected);
  });

  describe("authentication", () => {
    // Nested group setup and teardown
    beforeAll(() => {
      // Setup for this nested group only
    });
    afterAll(() => {
      // Teardown for this nested group only
    });

    it("should validate credentials", () => {
      // Nested test implementation
    });
  });
});
```## Task Management (General)
- For tasks other than testing, use `deno task` to run predefined tasks from `deno.json`.
- Check `deno.json` for available tasks.


