---
description: 
globs: *.test.ts,*.test.tsx,*.ts,.md
alwaysApply: false
---
Tests should be based on other existing tests.

Tests should be created using `it` from `@std/testing/bdd`.
Tests should be grouped using `describe` from `@std/testing/bdd`.
Tests that need lifecycle hooks should use `beforeAll`, `beforeEach`, `afterEach`, or `afterAll`.
Lifecycle hooks are for setup and teardown of resources needed by individual tests or groups of tests.

Assertions should be made using `@std/assert`.

Use `deno task test` to check if tests pass.
If change is specific to a single test file. For example, to run `./utils/testing.test.ts`, use `deno task test ./utils/testing.test.ts`.
If an example is added to a docstring or markdown file, it should be tested using the `--doc` flag. For example, to run all the examples in `./utils/testing.ts` docstrings, use `deno task test --doc ./utils/testing.ts`.

The `--coverage` flag can be used to generate coverage when running tests. Use `deno task test --coverage` to generate a complete coverage report. Then use `deno coverage --detailed` to view the coverage report. If new code that was added doesn't have test coverage, add test coverage for it.

If a file does not have tests yet and needs tests, create a new file with the same name, but add `.test` before the file extension. For example, if `example/main.ts` doesn't have a test case, add `example/main.test.ts` for the tests to go in.

Prefer snapshots created with `isSnapshotMode()` over `assertSnapshot()`. When using snapshot mode, the test should write to a file like shown in the documentation for the function.