import { Hono } from "hono";
import type { Env, Schema } from "hono";
import { createMiddleware } from "hono/factory";
import { serveStatic } from "hono/deno";
import { trimTrailingSlash } from "hono/trailing-slash";
import * as path from "@std/path";
import { HttpError } from "@udibo/http-error";
import { getInstance } from "@udibo/juniper/utils/otel";

const notFound = createMiddleware(() => {
  throw new HttpError(404, "Not found");
});

/**
 * Configuration for a route in the Juniper routing system. These are automatically generated by the build script.
 *
 * @template E - Hono environment type
 * @template S - Hono schema type
 * @template BasePath - Base path string type
 *
 * @example Basic route configuration
 * ```ts
 * import { createApp } from "@udibo/juniper/server";
 *
 * const routes: Routes = {
 *   path: "/",
 *   main: await import("./routes/main.ts"),
 *   index: await import("./routes/index.ts"),
 *   children: [
 *     {
 *       path: "/api",
 *       main: await import("./routes/api/main.ts"),
 *       children: [
 *         {
 *           path: "/users",
 *           main: await import("./routes/api/users.ts"),
 *         }
 *       ]
 *     }
 *   ]
 * };
 * ```
 */
export interface Routes<
  E extends Env = Env,
  S extends Schema = Schema,
  BasePath extends string = "/",
> {
  /** The URL path segment for this route */
  path: BasePath;
  /** Optional main route handler (typically used for middleware) */
  main?: { default?: Hono<E, S, BasePath> };
  /** Optional index route handler (handles exact path matches) */
  index?: { default?: Hono<E, S, BasePath> };
  /** Optional catch-all route handler (handles unmatched paths) */
  catchall?: { default?: Hono<E, S, BasePath> };
  /** Optional array of child routes */
  children?: Routes<E, S, BasePath>[];
}

function buildAppFromRoutes<
  E extends Env,
  S extends Schema,
  BasePath extends string,
>(
  routeConfig: Routes<E, S, BasePath>,
  projectRoot?: string,
): Hono<E, S, BasePath> {
  const { main, index, catchall, children } = routeConfig;
  const app = main?.default ?? new Hono<E, S, BasePath>();

  if (children) {
    for (const childRoute of children) {
      const childApp = buildAppFromRoutes(childRoute);
      app.route(
        childRoute.path,
        childApp,
      );
    }
  }

  if (index?.default) {
    app.route("/", index.default);
  }

  if (catchall?.default) {
    app.route(
      "/:*{.+}",
      catchall.default,
    );
    app.route(
      "*",
      catchall.default,
    );
  }

  if (projectRoot) {
    // Workaround for Hono Windows issue: use simple relative path from cwd
    const cwd = Deno.cwd();
    let publicPath = path.resolve(projectRoot, "./public");
    const relativePath = path.relative(cwd, publicPath);

    // Ensure forward slashes on Windows for Hono compatibility
    publicPath = Deno.build.os === "windows"
      ? relativePath.replace(/\\/g, "/")
      : relativePath;

    // Note: There's a known issue with Hono's serveStatic on Windows (https://github.com/honojs/hono/issues/3475)
    // This workaround attempts to work around path separator and relative path issues
    app.get(
      "*",
      serveStatic({
        root: publicPath,
      }),
    );
  }
  app.use("*", notFound);

  return app;
}

/**
 * Options for creating a Juniper application.
 *
 * @template E - Hono environment type
 * @template S - Hono schema type
 * @template BasePath - Base path string type
 */
interface CreateAppOptions<
  E extends Env = Env,
  S extends Schema = Schema,
  BasePath extends string = "/",
> {
  /** The absolute path to the project's root directory. */
  projectRoot: string;
  /** The route configuration object. */
  routes: Routes<E, S, BasePath>;
}

/**
 * Creates a Hono application with the provided route configuration.
 * The main entrypoint that uses this function is automatically generated by the build script.
 *
 * This function sets up error handling, trailing slash trimming, static file serving,
 * and builds the complete route tree from the provided configuration.
 *
 * @example Creating an application
 * ```ts
 * import { createApp } from "@udibo/juniper/server";
 *
 * export const app = createApp(import.meta.url, {
 *   path: "/",
 *   main: await import("./routes/main.ts"),
 *   children: [
 *     {
 *       path: "/api",
 *       main: await import("./routes/api/main.ts"),
 *       children: [
 *         {
 *           path: "/users",
 *           main: await import("./routes/api/users.ts"),
 *         }
 *       ]
 *     }
 *   ]
 * });
 *
 * if (import.meta.main) {
 *   Deno.serve(app.fetch);
 * }
 * ```
 *
 * @template E - Hono environment type
 * @template S - Hono schema type
 * @template BasePath - Base path string type
 *
 * @param moduleUrl - The URL of the module creating the app
 * @param routes - The route configuration object
 * @returns A configured Hono application instance
 */
export function createApp<
  E extends Env = Env,
  S extends Schema = Schema,
  BasePath extends string = "/",
>(
  moduleUrl: string,
  routes: Routes<E, S, BasePath>,
): Hono<E, S, BasePath> {
  const projectRoot = path.dirname(path.fromFileUrl(moduleUrl));
  const appWrapper = new Hono<E, S, BasePath>({ strict: true });

  appWrapper.onError((cause) => {
    const error = HttpError.from(cause);
    if (!error.instance) {
      const instance = getInstance();
      if (instance) {
        error.instance = instance;
      }
    }
    console.error(error);
    return error.getResponse();
  });
  appWrapper.use(trimTrailingSlash());

  const app = buildAppFromRoutes(routes, projectRoot);

  appWrapper.route("/", app);
  return appWrapper;
}
